// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:

    // Same ideas of RAM8 apply except that first 3 bits of the address are used to select which RAM8 is selected and the last 3 bits are used to select which register inside the RAM8 is selected.
    DMux8Way(in=load, sel=address[0..2], a=load1, b=load2, c=load3, d=load4, e=load5, f=load6, g=load7, h=load8);
    
    RAM8(in=in, load=load1, address=address[3..5], out=ram81);
    RAM8(in=in, load=load2, address=address[3..5], out=ram82);
    RAM8(in=in, load=load3, address=address[3..5], out=ram83);
    RAM8(in=in, load=load4, address=address[3..5], out=ram84);
    RAM8(in=in, load=load5, address=address[3..5], out=ram85);
    RAM8(in=in, load=load6, address=address[3..5], out=ram86);
    RAM8(in=in, load=load7, address=address[3..5], out=ram87);
    RAM8(in=in, load=load8, address=address[3..5], out=ram88);

    Mux8Way16(a=ram81, b=ram82, c=ram83, d=ram84, e=ram85, f=ram86, g=ram87, h=ram88, sel=address[0..2], out=out);
    
}