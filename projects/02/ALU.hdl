// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    // Zeroing the x input or not can be done by multiplexing between the input itself or all zeros  based on the zx control bit.
    Mux16(a=x, b=false, sel=zx, out=xORzero);

    // Negating an input or not can be done by multiplexing its value with its negation based on the nx control bit.
    Not16(in=xORzero, out=notxORzero);
    Mux16(a=xORzero, b=notxORzero, sel=nx, out=xOut);

    // Same idea for the y bits based on the ny and zy control bits.
    Mux16(a=y, b=false, sel=zy, out=yORzero);
    Not16(in=yORzero, out=notyORzero);
    Mux16(a=yORzero, b=notyORzero, sel=ny, out=yOut);
    
    // Multiplexing between x + y and x AND y based on the f control bit.
    Add16(a=xOut, b=yOut, out=xPlusy);
    And16(a=xOut, b=yOut, out=xAndy);
    Mux16(a=xAndy, b=xPlusy, sel=f, out=fOut);

    // Multiplexes between fOut and its negation based on the no control bit.
    // Also subdivides the 16-bit output bus into two sets of eight bits and its most significant bit, in order to be used later when checking if output is zero or negative.
    Not16(in=fOut, out=notfOut);
    Mux16(a=fOut, b=notfOut, sel=no, out=out, out[15]=msBit, out[0..7]=lsByte, out[8..15]=msByte);

    // Combining the 8 least significant bits with the 8 most significant bits we can check if out is zero using Or8Way gates since they evaluate to 1 if any of its inputs is a 1, thus evaluating to zero only when all its inputs are zero.
    Or8Way(in=lsByte, out=or8lsByte);
    Or8Way(in=msByte, out=or8msByte);

    // Then an OR gate is used to converge the to Or8Way gates together.
    Or(a=or8lsByte, b=or8msByte, out=notzr);

    // Since zr must be 1 if output is 0, all that is left is to invert the output.
    Not(in=notzr, out=zr);
    
    // A number is negative in two's complement if its most significat bit is 1, thus evaluating only to 1 when ANDed with a 1. Its output is the ng control bit.
    And(a=true, b=msBit, out=ng);
    
}